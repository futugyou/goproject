swagger: "2.0"
info:
  title: openai web API
  description: |
    provider some api for openai demo.
  version: 1.0.0
basePath: /api/v1
paths:
  /autio/transcription:
    post:
      tags:
      - autio
      description: |-
        create audio transcription
        <br>
      operationId: AudioController.CreateAudioTranscription
      parameters:
      - in: body
        name: body
        description: body for create audio transcription content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateAudioTranscriptionRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateAudioTranscriptionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateAudioTranscriptionResponse'
  /autio/translation:
    post:
      tags:
      - autio
      description: |-
        create audio translation
        <br>
      operationId: AudioController.CreateAudioTranslation
      parameters:
      - in: body
        name: body
        description: body for create audio translation content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateAudioTranslationRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateAudioTranslationRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateAudioTranslationResponse'
  /chat/:
    post:
      tags:
      - chat
      description: |-
        create chat
        <br>
      operationId: ChatController.CreateChat
      parameters:
      - in: body
        name: body
        description: body for create chat content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateChatCompletionRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateChatCompletionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateChatCompletionResponse'
  /fine-tune/{fine_tune_id}/events:
    get:
      tags:
      - fine-tune
      description: |-
        get fine tune by fine_tune_id
        <br>
      operationId: FineTuneController.Get Fine Tune Events
      parameters:
      - in: path
        name: fine_tune_id
        description: The key for fine_tune
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.ListFinetuneEventResponse'
        "403":
          description: fine_tune_id is empty
  /model/:
    get:
      tags:
      - model
      description: |-
        list model
        <br>
      operationId: ModelController.ListModel
      responses:
        "200":
          description: "{list model} \t[]string"
  /qa/:
    post:
      tags:
      - qa
      description: |-
        create q&a
        <br>
      operationId: QuestionController.Createq&a
      parameters:
      - in: body
        name: body
        description: body for create q&a content
        required: true
        schema:
          $ref: '#/definitions/models.QuestionAnswer'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/models.QuestionAnswer'
      responses:
        "200":
          description: "{test} \tstring"
definitions:
  lib.ChatCompletionMessage:
    title: ChatCompletionMessage
    type: object
    properties:
      content:
        type: string
      role:
        type: string
  lib.Choices:
    title: Choices
    type: object
    properties:
      finish_reason:
        type: string
      index:
        type: integer
        format: int32
      logprobs:
        $ref: '#/definitions/lib.Logprobs'
      message:
        type: array
        items:
          $ref: '#/definitions/lib.ChatCompletionMessage'
      text:
        type: string
  lib.CreateAudioTranscriptionRequest:
    title: CreateAudioTranscriptionRequest
    type: object
    properties:
      file:
        $ref: '#/definitions/os.File'
      language:
        type: string
      model:
        type: string
      prompt:
        type: string
      response_format:
        description: json, text, srt, verbose_json, or vtt.
        type: string
      temperature:
        type: number
        format: float
  lib.CreateAudioTranscriptionResponse:
    title: CreateAudioTranscriptionResponse
    type: object
    properties:
      error:
        $ref: '#/definitions/lib.OpenaiError'
      text:
        type: string
  lib.CreateAudioTranslationRequest:
    title: CreateAudioTranslationRequest
    type: object
    properties:
      file:
        $ref: '#/definitions/os.File'
      model:
        type: string
      prompt:
        type: string
      response_format:
        description: json, text, srt, verbose_json, or vtt.
        type: string
      temperature:
        type: number
        format: float
  lib.CreateAudioTranslationResponse:
    title: CreateAudioTranslationResponse
    type: object
    properties:
      error:
        $ref: '#/definitions/lib.OpenaiError'
      text:
        type: string
  lib.CreateChatCompletionRequest:
    title: CreateChatCompletionRequest
    type: object
    properties:
      frequency_penalty:
        type: number
        format: float
      logit_bias:
        additionalProperties:
          type: integer
          format: int32
      max_tokens:
        type: integer
        format: int32
      messages:
        $ref: '#/definitions/lib.ChatCompletionMessage'
      model:
        type: string
      "n":
        type: integer
        format: int32
      presence_penalty:
        type: number
        format: float
      stop:
        type: array
        items:
          type: string
      stream:
        type: boolean
      temperature:
        type: number
        format: float
      top_p:
        type: number
        format: float
      user:
        type: string
  lib.CreateChatCompletionResponse:
    title: CreateChatCompletionResponse
    type: object
    properties:
      choices:
        type: array
        items:
          $ref: '#/definitions/lib.Choices'
      created:
        type: integer
        format: int32
      error:
        $ref: '#/definitions/lib.OpenaiError'
      id:
        type: string
      model:
        type: string
      object:
        type: string
      usage:
        $ref: '#/definitions/lib.Usage'
  lib.Events:
    title: Events
    type: object
    properties:
      created_at:
        type: integer
        format: int32
      level:
        type: string
      message:
        type: string
      object:
        type: string
  lib.ListFinetuneEventResponse:
    title: ListFinetuneEventResponse
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/lib.Events'
      error:
        $ref: '#/definitions/lib.OpenaiError'
      object:
        type: string
  lib.Logprobs:
    title: Logprobs
    type: object
    properties:
      text_offset:
        type: array
        items:
          type: integer
          format: int32
      token_logprobs:
        type: array
        items:
          type: number
          format: float
      tokens:
        type: array
        items:
          type: string
      top_logprobs:
        $ref: '#/definitions/lib.map[string][float32]'
  lib.OpenaiError:
    title: OpenaiError
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      param:
        type: string
      type:
        type: string
  lib.Usage:
    title: Usage
    type: object
    properties:
      completion_tokens:
        type: integer
        format: int32
      prompt_tokens:
        type: integer
        format: int32
      total_tokens:
        type: integer
        format: int32
  lib.map[string][float32]:
    title: map[string][float32]
    type: object
  models.Object:
    title: Object
    type: object
  models.QuestionAnswer:
    title: QuestionAnswer
    type: object
    properties:
      best_of:
        type: integer
        format: int64
      echo:
        type: boolean
      frequency_penalty:
        type: number
        format: float
      logprobs:
        type: integer
        format: int64
      max_tokens:
        type: integer
        format: int32
      presence_penalty:
        type: number
        format: float
      prompt:
        type: string
      stop:
        type: array
        items:
          type: string
      stream:
        type: boolean
      temperature:
        type: number
        format: float
      top_p:
        type: number
        format: float
  models.User:
    title: User
    type: object
  os.File:
    title: File
    type: object
tags:
- name: model
  description: |
    Operations about Models
- name: chat
  description: |
    Operations about Chat
- name: fine-tune
  description: |
    Operations about fine tune
- name: autio
  description: |
    Operations about Chat
- name: qa
  description: |
    Operations about q&a
