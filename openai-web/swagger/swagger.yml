swagger: "2.0"
info:
  title: openai web API
  description: |
    provider some api for openai demo.
  version: 1.0.0
basePath: /api/v1
securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://identity-center.vercel.app/authorize'
    tokenUrl: 'https://identity-center.vercel.app/token'
    scopes:
      all: all scope
      openai: openai scope
security:
  - OauthSecurity:
    - all
paths:
  /autio/transcription:
    post:
      tags:
      - autio
      description: |-
        create audio transcription
        <br>
      operationId: AudioController.CreateAudioTranscription
      parameters:
      - in: body
        name: body
        description: body for create audio transcription content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateAudioTranscriptionRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateAudioTranscriptionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateAudioTranscriptionResponse'
  /autio/translation:
    post:
      tags:
      - autio
      description: |-
        create audio translation
        <br>
      operationId: AudioController.CreateAudioTranslation
      parameters:
      - in: body
        name: body
        description: body for create audio translation content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateAudioTranslationRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateAudioTranslationRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateAudioTranslationResponse'
  /chat/:
    post:
      tags:
      - chat
      description: |-
        create chat
        <br>
      operationId: ChatController.CreateChat
      parameters:
      - in: body
        name: body
        description: body for create chat content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateChatCompletionRequest'
      - in: query
        name: request
        schema:
          $ref: '#/definitions/lib.CreateChatCompletionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateChatCompletionResponse'
  /chat/sse:
    post:
      tags:
      - chat
      description: |-
        Create Chat Stream
        <br>
      operationId: ChatController.Create Chat With SSE
      parameters:
      - in: body
        name: body
        description: body for create Chat content
        required: true
        schema:
          $ref: '#/definitions/services.CreateChatRequest'
  /completions/:
    post:
      tags:
      - completions
      description: |-
        create completion
        <br>
      operationId: CompletionController.Create Completion
      parameters:
      - in: body
        name: body
        description: body for create completion content
        required: true
        schema:
          $ref: '#/definitions/models.CompletionModel'
  /completions/sse:
    post:
      tags:
      - completions
      description: |-
        create completion stream
        <br>
      operationId: CompletionController.Create Completion With SSE
      parameters:
      - in: body
        name: body
        description: body for create completion content
        required: true
        schema:
          $ref: '#/definitions/lib.CreateCompletionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.CreateCompletionResponse'
  /edits/:
    post:
      tags:
      - edits
      description: |-
        create edit
        <br>
      operationId: EditController.Create edit
      parameters:
      - in: body
        name: body
        description: body for create edit content
        required: true
        schema:
          $ref: '#/definitions/services.CreateEditsRequest'
      responses:
        "200":
          description: "{test} \tstring"
  /examples/:
    get:
      tags:
      - examples
      operationId: ExampleController.get examples
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/services.ExampleModel'
    post:
      tags:
      - examples
      operationId: ExampleController.create examples
      parameters:
      - in: body
        name: body
        description: body for create example content
        required: true
        schema:
          $ref: '#/definitions/services.ExampleModel'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/services.ExampleModel[]'
  /examples/init:
    post:
      tags:
      - examples
      operationId: ExampleController.get examples
      responses:
        "200":
          description: '{string}'
  /fine-tune/{fine_tune_id}/events:
    get:
      tags:
      - fine-tune
      description: |-
        get fine tune by fine_tune_id
        <br>
      operationId: FineTuneController.Get Fine Tune Events
      parameters:
      - in: path
        name: fine_tune_id
        description: The key for fine_tune
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/lib.ListFinetuneEventResponse'
        "403":
          description: fine_tune_id is empty
  /model/:
    get:
      tags:
      - model
      description: |-
        list model
        <br>
      operationId: ModelController.ListModel
      responses:
        "200":
          description: "{list model} \t[]string"
  /test/:
    get:
      tags:
      - test
      description: |-
        do the test
        <br>
      operationId: TestController.test openai lib
definitions:
  lib.CreateAudioTranscriptionRequest:
    title: CreateAudioTranscriptionRequest
    type: object
  lib.CreateAudioTranscriptionResponse:
    title: CreateAudioTranscriptionResponse
    type: object
  lib.CreateAudioTranslationRequest:
    title: CreateAudioTranslationRequest
    type: object
  lib.CreateAudioTranslationResponse:
    title: CreateAudioTranslationResponse
    type: object
  lib.CreateChatCompletionRequest:
    title: CreateChatCompletionRequest
    type: object
  lib.CreateChatCompletionResponse:
    title: CreateChatCompletionResponse
    type: object
  lib.CreateCompletionRequest:
    title: CreateCompletionRequest
    type: object
  lib.CreateCompletionResponse:
    title: CreateCompletionResponse
    type: object
  lib.ListFinetuneEventResponse:
    title: ListFinetuneEventResponse
    type: object
  models.CompletionModel:
    title: CompletionModel
    type: object
    properties:
      best_of:
        type: integer
        format: int32
      echo:
        type: boolean
      frequency_penalty:
        type: number
        format: float
      logprobs:
        type: integer
        format: int64
      max_tokens:
        type: integer
        format: int32
      model:
        type: string
      presence_penalty:
        type: number
        format: float
      prompt:
        type: string
      stop:
        type: array
        items:
          type: string
      stream:
        type: boolean
      suffix:
        type: string
      temperature:
        type: number
        format: float
      top_p:
        type: number
        format: float
  models.Object:
    title: Object
    type: object
  models.User:
    title: User
    type: object
  services.Chat:
    title: Chat
    type: object
    properties:
      content:
        type: string
      role:
        type: string
  services.CreateChatRequest:
    title: CreateChatRequest
    type: object
    properties:
      frequency_penalty:
        type: number
        format: float
      max_tokens:
        type: integer
        format: int32
      messages:
        type: array
        items:
          $ref: '#/definitions/services.Chat'
      model:
        type: string
      presence_penalty:
        type: number
        format: float
      temperature:
        type: number
        format: float
      top_p:
        type: number
        format: float
  services.CreateEditsRequest:
    title: CreateEditsRequest
    type: object
    properties:
      input:
        type: string
      instruction:
        type: string
      model:
        type: string
      "n":
        type: integer
        format: int32
      temperature:
        type: number
        format: float
      top_p:
        type: number
        format: float
  services.ExampleModel:
    title: ExampleModel
    type: object
    properties:
      description:
        type: string
      frequency_penalty:
        type: number
        format: float
      key:
        type: string
      max_tokens:
        type: integer
        format: int32
      model:
        type: string
      presence_penalty:
        type: number
        format: float
      prompt:
        type: string
      sample_response:
        type: string
      stop:
        type: array
        items:
          type: string
      subTitle:
        type: string
      tags:
        type: array
        items:
          type: string
      temperature:
        type: number
        format: float
      title:
        type: string
      top_p:
        type: number
        format: float
  services.ExampleModel[]:
    title: ExampleModel[]
    type: object
tags:
- name: model
  description: |
    Operations about Models
- name: chat
  description: |
    Operations about Chat
- name: fine-tune
  description: |
    Operations about fine tune
- name: autio
  description: |
    Operations about Chat
- name: test
  description: |
    Operations about test
- name: examples
  description: |
    Operations about Examples
- name: completions
  description: |
    Operations about completion
- name: edits
  description: |
    Operations about edit
