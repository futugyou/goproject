// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/futugyousuzu/identity-server/token (interfaces: IJwksRepository)

// Package core_test is a generated GoMock package.
package core_test

import (
	context "context"
	reflect "reflect"

	token "github.com/futugyousuzu/identity-server/token"
	gomock "go.uber.org/mock/gomock"
)

// MockIJwksRepository is a mock of IJwksRepository interface.
type MockIJwksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIJwksRepositoryMockRecorder
}

// MockIJwksRepositoryMockRecorder is the mock recorder for MockIJwksRepository.
type MockIJwksRepositoryMockRecorder struct {
	mock *MockIJwksRepository
}

// NewMockIJwksRepository creates a new mock instance.
func NewMockIJwksRepository(ctrl *gomock.Controller) *MockIJwksRepository {
	mock := &MockIJwksRepository{ctrl: ctrl}
	mock.recorder = &MockIJwksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwksRepository) EXPECT() *MockIJwksRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIJwksRepository) Get(arg0 context.Context, arg1 string) (*token.JwkModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*token.JwkModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIJwksRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIJwksRepository)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIJwksRepository) GetAll(arg0 context.Context) ([]*token.JwkModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*token.JwkModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIJwksRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIJwksRepository)(nil).GetAll), arg0)
}

// Insert mocks base method.
func (m *MockIJwksRepository) Insert(arg0 context.Context, arg1 *token.JwkModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIJwksRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIJwksRepository)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *MockIJwksRepository) Update(arg0 context.Context, arg1 *token.JwkModel, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIJwksRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIJwksRepository)(nil).Update), arg0, arg1, arg2)
}
