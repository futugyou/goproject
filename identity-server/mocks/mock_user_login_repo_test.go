// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/futugyousuzu/identity-server/user (interfaces: IUserLoginRepository)

// Package core_test is a generated GoMock package.
package core_test

import (
	context "context"
	reflect "reflect"

	user "github.com/futugyousuzu/identity-server/user"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserLoginRepository is a mock of IUserLoginRepository interface.
type MockIUserLoginRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserLoginRepositoryMockRecorder
}

// MockIUserLoginRepositoryMockRecorder is the mock recorder for MockIUserLoginRepository.
type MockIUserLoginRepositoryMockRecorder struct {
	mock *MockIUserLoginRepository
}

// NewMockIUserLoginRepository creates a new mock instance.
func NewMockIUserLoginRepository(ctrl *gomock.Controller) *MockIUserLoginRepository {
	mock := &MockIUserLoginRepository{ctrl: ctrl}
	mock.recorder = &MockIUserLoginRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserLoginRepository) EXPECT() *MockIUserLoginRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIUserLoginRepository) Get(arg0 context.Context, arg1 string) (*user.UserLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*user.UserLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserLoginRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserLoginRepository)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockIUserLoginRepository) Insert(arg0 context.Context, arg1 *user.UserLogin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIUserLoginRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUserLoginRepository)(nil).Insert), arg0, arg1)
}
