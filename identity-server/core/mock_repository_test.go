// Code generated by MockGen. DO NOT EDIT.
// Source: core\repository.go

// Package core_test is a generated GoMock package.
package core_test

import (
	context "context"
	reflect "reflect"

	core "github.com/futugyousuzu/identity-server/core"
	gomock "go.uber.org/mock/gomock"
)

// MockIInsertRepository is a mock of IInsertRepository interface.
type MockIInsertRepository[E core.IEntity] struct {
	ctrl     *gomock.Controller
	recorder *MockIInsertRepositoryMockRecorder[E]
}

// MockIInsertRepositoryMockRecorder is the mock recorder for MockIInsertRepository.
type MockIInsertRepositoryMockRecorder[E core.IEntity] struct {
	mock *MockIInsertRepository[E]
}

// NewMockIInsertRepository creates a new mock instance.
func NewMockIInsertRepository[E core.IEntity](ctrl *gomock.Controller) *MockIInsertRepository[E] {
	mock := &MockIInsertRepository[E]{ctrl: ctrl}
	mock.recorder = &MockIInsertRepositoryMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInsertRepository[E]) EXPECT() *MockIInsertRepositoryMockRecorder[E] {
	return m.recorder
}

// Insert mocks base method.
func (m *MockIInsertRepository[E]) Insert(ctx context.Context, obj E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIInsertRepositoryMockRecorder[E]) Insert(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIInsertRepository[E])(nil).Insert), ctx, obj)
}

// MockIUpdateRepository is a mock of IUpdateRepository interface.
type MockIUpdateRepository[E core.IEntity, K any] struct {
	ctrl     *gomock.Controller
	recorder *MockIUpdateRepositoryMockRecorder[E, K]
}

// MockIUpdateRepositoryMockRecorder is the mock recorder for MockIUpdateRepository.
type MockIUpdateRepositoryMockRecorder[E core.IEntity, K any] struct {
	mock *MockIUpdateRepository[E, K]
}

// NewMockIUpdateRepository creates a new mock instance.
func NewMockIUpdateRepository[E core.IEntity, K any](ctrl *gomock.Controller) *MockIUpdateRepository[E, K] {
	mock := &MockIUpdateRepository[E, K]{ctrl: ctrl}
	mock.recorder = &MockIUpdateRepositoryMockRecorder[E, K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUpdateRepository[E, K]) EXPECT() *MockIUpdateRepositoryMockRecorder[E, K] {
	return m.recorder
}

// Update mocks base method.
func (m *MockIUpdateRepository[E, K]) Update(ctx context.Context, obj E, id K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUpdateRepositoryMockRecorder[E, K]) Update(ctx, obj, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUpdateRepository[E, K])(nil).Update), ctx, obj, id)
}

// MockIDeleteRepository is a mock of IDeleteRepository interface.
type MockIDeleteRepository[E core.IEntity, K any] struct {
	ctrl     *gomock.Controller
	recorder *MockIDeleteRepositoryMockRecorder[E, K]
}

// MockIDeleteRepositoryMockRecorder is the mock recorder for MockIDeleteRepository.
type MockIDeleteRepositoryMockRecorder[E core.IEntity, K any] struct {
	mock *MockIDeleteRepository[E, K]
}

// NewMockIDeleteRepository creates a new mock instance.
func NewMockIDeleteRepository[E core.IEntity, K any](ctrl *gomock.Controller) *MockIDeleteRepository[E, K] {
	mock := &MockIDeleteRepository[E, K]{ctrl: ctrl}
	mock.recorder = &MockIDeleteRepositoryMockRecorder[E, K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeleteRepository[E, K]) EXPECT() *MockIDeleteRepositoryMockRecorder[E, K] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDeleteRepository[E, K]) Delete(ctx context.Context, obj E, id K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, obj, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDeleteRepositoryMockRecorder[E, K]) Delete(ctx, obj, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDeleteRepository[E, K])(nil).Delete), ctx, obj, id)
}

// MockIGetAllRepository is a mock of IGetAllRepository interface.
type MockIGetAllRepository[E core.IEntity] struct {
	ctrl     *gomock.Controller
	recorder *MockIGetAllRepositoryMockRecorder[E]
}

// MockIGetAllRepositoryMockRecorder is the mock recorder for MockIGetAllRepository.
type MockIGetAllRepositoryMockRecorder[E core.IEntity] struct {
	mock *MockIGetAllRepository[E]
}

// NewMockIGetAllRepository creates a new mock instance.
func NewMockIGetAllRepository[E core.IEntity](ctrl *gomock.Controller) *MockIGetAllRepository[E] {
	mock := &MockIGetAllRepository[E]{ctrl: ctrl}
	mock.recorder = &MockIGetAllRepositoryMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetAllRepository[E]) EXPECT() *MockIGetAllRepositoryMockRecorder[E] {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIGetAllRepository[E]) GetAll(ctx context.Context) ([]*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIGetAllRepositoryMockRecorder[E]) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIGetAllRepository[E])(nil).GetAll), ctx)
}

// MockIGetRepository is a mock of IGetRepository interface.
type MockIGetRepository[E core.IEntity, K any] struct {
	ctrl     *gomock.Controller
	recorder *MockIGetRepositoryMockRecorder[E, K]
}

// MockIGetRepositoryMockRecorder is the mock recorder for MockIGetRepository.
type MockIGetRepositoryMockRecorder[E core.IEntity, K any] struct {
	mock *MockIGetRepository[E, K]
}

// NewMockIGetRepository creates a new mock instance.
func NewMockIGetRepository[E core.IEntity, K any](ctrl *gomock.Controller) *MockIGetRepository[E, K] {
	mock := &MockIGetRepository[E, K]{ctrl: ctrl}
	mock.recorder = &MockIGetRepositoryMockRecorder[E, K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetRepository[E, K]) EXPECT() *MockIGetRepositoryMockRecorder[E, K] {
	return m.recorder
}

// Get mocks base method.
func (m *MockIGetRepository[E, K]) Get(ctx context.Context, id K) (*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIGetRepositoryMockRecorder[E, K]) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIGetRepository[E, K])(nil).Get), ctx, id)
}
